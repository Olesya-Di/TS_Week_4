1. В чём заключаются плюсы ООП в сравнении с другими парадигмами программирования.
    - В парадигме объектов легче писать код. Удобно один раз создать класс или метод, а потом его использовать. Не нужно повторно переписывать десятки строк кода. Можно пользоваться специальными рекомендациями по написанию ООП-кода — SOLID. 
    - Читать код гораздо проще. Даже в чужом коде обычно сразу видны конкретные объекты и методы, их удобно искать, чтобы посмотреть, что именно они делают. 
    - Код легче обновлять. Класс или метод достаточно изменить в одном месте, чтобы он изменился во всех наследуемых классах и объектах. Не нужно переписывать каждый объект отдельно, выискивая, где именно в коде он расположен. 
    - Программистам удобнее работать в команде. Разные люди могут отвечать за разные объекты и при этом пользоваться плодами трудов коллег. 
    - Код можно переиспользовать. Один раз написанный класс или объект можно затем переносить в другие проекты. Достаточно однажды написать объект «Кнопка заказа» и потом можно вставлять его в почти неизменном виде в разные каталоги товаров и мобильные приложения. 
    - Шаблоны проектирования. Именно на базе ООП построены готовые решения для взаимодействия классов друг с другом, которые позволяют не писать этот код с нуля, а взять шаблон.

2. Почему важно придерживаться принципов ООП при написании кода?
    Объектно-ориентированное программирование упрощает написание кода, ускоряет работу за счет применимости шаблонов, повышает удобство восприятия информации. Вносить изменения и искать ошибки в такой четкой структуре гораздо легче. 

3. В чём различие интерфейса и абстрактного класса?
    Интерфейс описывает только поведение. У него нет состояния (реализации). А у абстрактного класса состояние есть: он описывает и то, и другое.
    Абстрактный класс связывает между собой и объединяет классы, имеющие очень близкую связь. В то же время, один и тот же интерфейс могут реализовать классы, у которых вообще нет ничего общего.
    Классы могут реализовывать сколько угодно интерфейсов, но наследоваться можно только от одного класса
    Абстрактный класс доступен во время выполнения и интерфейс во время компиляции. Например, мы не можем использовать instanceof с интерфейсами.

4. В чём разница между модификаторами доступа?
    Модификатор private используют, чтобы избежать модификации поля или метода из вне класса
    Модификатор public означает, что мы имеем доступ к параметрам или методам также вне класса. Все поля и методы являются public по умолчанию
    Модификатор доступа readonly делает поле доступным только для чтения и не доступным для любой модификации. Значение полей для чтения можно установить либо при объявлении, либо в конструкторе. 

5. Зачем применять принцип полиморфизма в вашем коде?
    Полиморфизм повышает коэффициент повторного использования кода, то есть уменьшает дублирование. Способствует модульности, делает систему типов более гибкой. Полиморфизм гарантирует, что один тип может быть заменен другими совместимыми при условии, что они удовлетворяют общедоступному интерфейсу, поэтому это также способствует скрытию информации и модульности.